<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="1523023283"><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1109" width="0.0233%" height="15" fill="rgb(227,0,7)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1119.50"></text></g><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1093" width="0.0233%" height="15" fill="rgb(217,0,24)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1103.50"></text></g><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1077" width="0.0233%" height="15" fill="rgb(221,193,54)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1087.50"></text></g><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1061" width="0.0233%" height="15" fill="rgb(248,212,6)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1045" width="0.0233%" height="15" fill="rgb(208,68,35)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1029" width="0.0233%" height="15" fill="rgb(232,128,0)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1039.50"></text></g><g><title>[ld-linux-x86-64.so.2] (354,606 samples, 0.02%)</title><rect x="0.0000%" y="1013" width="0.0233%" height="15" fill="rgb(207,160,47)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1023.50"></text></g><g><title>asm_exc_page_fault (354,606 samples, 0.02%)</title><rect x="0.0000%" y="997" width="0.0233%" height="15" fill="rgb(228,23,34)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="1007.50"></text></g><g><title>exc_page_fault (354,606 samples, 0.02%)</title><rect x="0.0000%" y="981" width="0.0233%" height="15" fill="rgb(218,30,26)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="991.50"></text></g><g><title>do_user_addr_fault (354,606 samples, 0.02%)</title><rect x="0.0000%" y="965" width="0.0233%" height="15" fill="rgb(220,122,19)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="975.50"></text></g><g><title>handle_mm_fault (354,606 samples, 0.02%)</title><rect x="0.0000%" y="949" width="0.0233%" height="15" fill="rgb(250,228,42)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="959.50"></text></g><g><title>__handle_mm_fault (354,606 samples, 0.02%)</title><rect x="0.0000%" y="933" width="0.0233%" height="15" fill="rgb(240,193,28)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="943.50"></text></g><g><title>do_anonymous_page (354,606 samples, 0.02%)</title><rect x="0.0000%" y="917" width="0.0233%" height="15" fill="rgb(216,20,37)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="927.50"></text></g><g><title>vma_alloc_folio_noprof (354,606 samples, 0.02%)</title><rect x="0.0000%" y="901" width="0.0233%" height="15" fill="rgb(206,188,39)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="911.50"></text></g><g><title>folio_alloc_mpol_noprof (354,606 samples, 0.02%)</title><rect x="0.0000%" y="885" width="0.0233%" height="15" fill="rgb(217,207,13)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="895.50"></text></g><g><title>alloc_pages_mpol_noprof (354,606 samples, 0.02%)</title><rect x="0.0000%" y="869" width="0.0233%" height="15" fill="rgb(231,73,38)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="879.50"></text></g><g><title>__alloc_pages_noprof (354,606 samples, 0.02%)</title><rect x="0.0000%" y="853" width="0.0233%" height="15" fill="rgb(225,20,46)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="863.50"></text></g><g><title>get_page_from_freelist (354,606 samples, 0.02%)</title><rect x="0.0000%" y="837" width="0.0233%" height="15" fill="rgb(210,31,41)" fg:x="342" fg:w="354606"/><text x="0.2500%" y="847.50"></text></g><g><title>__send (4,439,316 samples, 0.29%)</title><rect x="0.0233%" y="1109" width="0.2915%" height="15" fill="rgb(221,200,47)" fg:x="354948" fg:w="4439316"/><text x="0.2733%" y="1119.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (33,709,909 samples, 2.21%)</title><rect x="44.9338%" y="805" width="2.2134%" height="15" fill="rgb(226,26,5)" fg:x="684351658" fg:w="33709909"/><text x="45.1838%" y="815.50">&lt;..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact::_{{closure}} (52,815,534 samples, 3.47%)</title><rect x="49.6487%" y="773" width="3.4678%" height="15" fill="rgb(249,33,26)" fg:x="756160540" fg:w="52815534"/><text x="49.8987%" y="783.50">&lt;st..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (52,815,534 samples, 3.47%)</title><rect x="49.6487%" y="757" width="3.4678%" height="15" fill="rgb(235,183,28)" fg:x="756160540" fg:w="52815534"/><text x="49.8987%" y="767.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (52,815,534 samples, 3.47%)</title><rect x="49.6487%" y="741" width="3.4678%" height="15" fill="rgb(221,5,38)" fg:x="756160540" fg:w="52815534"/><text x="49.8987%" y="751.50">cor..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume_with (194,622,060 samples, 12.78%)</title><rect x="47.1471%" y="789" width="12.7787%" height="15" fill="rgb(247,18,42)" fg:x="718061567" fg:w="194622060"/><text x="47.3971%" y="799.50">std::io::buffered::..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (103,707,553 samples, 6.81%)</title><rect x="53.1165%" y="773" width="6.8093%" height="15" fill="rgb(241,131,45)" fg:x="808976074" fg:w="103707553"/><text x="53.3665%" y="783.50">std::io::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (22,450,318 samples, 1.47%)</title><rect x="58.4517%" y="757" width="1.4741%" height="15" fill="rgb(249,31,29)" fg:x="890233309" fg:w="22450318"/><text x="58.7017%" y="767.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (22,450,318 samples, 1.47%)</title><rect x="58.4517%" y="741" width="1.4741%" height="15" fill="rgb(225,111,53)" fg:x="890233309" fg:w="22450318"/><text x="58.7017%" y="751.50"></text></g><g><title>__tcp_cleanup_rbuf (12,935,268 samples, 0.85%)</title><rect x="59.9258%" y="501" width="0.8493%" height="15" fill="rgb(238,160,17)" fg:x="912683627" fg:w="12935268"/><text x="60.1758%" y="511.50"></text></g><g><title>__tcp_select_window (12,935,268 samples, 0.85%)</title><rect x="59.9258%" y="485" width="0.8493%" height="15" fill="rgb(214,148,48)" fg:x="912683627" fg:w="12935268"/><text x="60.1758%" y="495.50"></text></g><g><title>__tcp_send_ack.part.0 (4,481,709 samples, 0.29%)</title><rect x="60.7751%" y="501" width="0.2943%" height="15" fill="rgb(232,36,49)" fg:x="925618895" fg:w="4481709"/><text x="61.0251%" y="511.50"></text></g><g><title>sk_filter_trim_cap (4,368,502 samples, 0.29%)</title><rect x="61.9783%" y="261" width="0.2868%" height="15" fill="rgb(209,103,24)" fg:x="943944699" fg:w="4368502"/><text x="62.2283%" y="271.50"></text></g><g><title>dev_hard_start_xmit (4,375,075 samples, 0.29%)</title><rect x="62.2652%" y="133" width="0.2873%" height="15" fill="rgb(229,88,8)" fg:x="948313201" fg:w="4375075"/><text x="62.5152%" y="143.50"></text></g><g><title>loopback_xmit (4,375,075 samples, 0.29%)</title><rect x="62.2652%" y="117" width="0.2873%" height="15" fill="rgb(213,181,19)" fg:x="948313201" fg:w="4375075"/><text x="62.5152%" y="127.50"></text></g><g><title>__netif_rx (4,375,075 samples, 0.29%)</title><rect x="62.2652%" y="101" width="0.2873%" height="15" fill="rgb(254,191,54)" fg:x="948313201" fg:w="4375075"/><text x="62.5152%" y="111.50"></text></g><g><title>netif_rx_internal (4,375,075 samples, 0.29%)</title><rect x="62.2652%" y="85" width="0.2873%" height="15" fill="rgb(241,83,37)" fg:x="948313201" fg:w="4375075"/><text x="62.5152%" y="95.50"></text></g><g><title>enqueue_to_backlog (4,375,075 samples, 0.29%)</title><rect x="62.2652%" y="69" width="0.2873%" height="15" fill="rgb(233,36,39)" fg:x="948313201" fg:w="4375075"/><text x="62.5152%" y="79.50"></text></g><g><title>__tcp_transmit_skb (10,289,359 samples, 0.68%)</title><rect x="62.2652%" y="197" width="0.6756%" height="15" fill="rgb(226,3,54)" fg:x="948313201" fg:w="10289359"/><text x="62.5152%" y="207.50"></text></g><g><title>__ip_queue_xmit (10,289,359 samples, 0.68%)</title><rect x="62.2652%" y="181" width="0.6756%" height="15" fill="rgb(245,192,40)" fg:x="948313201" fg:w="10289359"/><text x="62.5152%" y="191.50"></text></g><g><title>ip_finish_output2 (10,289,359 samples, 0.68%)</title><rect x="62.2652%" y="165" width="0.6756%" height="15" fill="rgb(238,167,29)" fg:x="948313201" fg:w="10289359"/><text x="62.5152%" y="175.50"></text></g><g><title>__dev_queue_xmit (10,289,359 samples, 0.68%)</title><rect x="62.2652%" y="149" width="0.6756%" height="15" fill="rgb(232,182,51)" fg:x="948313201" fg:w="10289359"/><text x="62.5152%" y="159.50"></text></g><g><title>validate_xmit_skb (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="133" width="0.3883%" height="15" fill="rgb(231,60,39)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="143.50"></text></g><g><title>__skb_gso_segment (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="117" width="0.3883%" height="15" fill="rgb(208,69,12)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="127.50"></text></g><g><title>skb_mac_gso_segment (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="101" width="0.3883%" height="15" fill="rgb(235,93,37)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="111.50"></text></g><g><title>inet_gso_segment (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="85" width="0.3883%" height="15" fill="rgb(213,116,39)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="95.50"></text></g><g><title>tcp_gso_segment (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="69" width="0.3883%" height="15" fill="rgb(222,207,29)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="79.50"></text></g><g><title>skb_segment (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="53" width="0.3883%" height="15" fill="rgb(206,96,30)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="63.50"></text></g><g><title>__copy_skb_header (5,914,284 samples, 0.39%)</title><rect x="62.5524%" y="37" width="0.3883%" height="15" fill="rgb(218,138,4)" fg:x="952688276" fg:w="5914284"/><text x="62.8024%" y="47.50"></text></g><g><title>__tcp_transmit_skb (33,034,571 samples, 2.17%)</title><rect x="61.0694%" y="501" width="2.1690%" height="15" fill="rgb(250,191,14)" fg:x="930100604" fg:w="33034571"/><text x="61.3194%" y="511.50">_..</text></g><g><title>__ip_queue_xmit (33,034,571 samples, 2.17%)</title><rect x="61.0694%" y="485" width="2.1690%" height="15" fill="rgb(239,60,40)" fg:x="930100604" fg:w="33034571"/><text x="61.3194%" y="495.50">_..</text></g><g><title>ip_finish_output2 (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="469" width="1.8755%" height="15" fill="rgb(206,27,48)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="479.50">i..</text></g><g><title>__dev_queue_xmit (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="453" width="1.8755%" height="15" fill="rgb(225,35,8)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="463.50">_..</text></g><g><title>__local_bh_enable_ip (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="437" width="1.8755%" height="15" fill="rgb(250,213,24)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="447.50">_..</text></g><g><title>do_softirq.part.0 (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="421" width="1.8755%" height="15" fill="rgb(247,123,22)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="431.50">d..</text></g><g><title>handle_softirqs (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="405" width="1.8755%" height="15" fill="rgb(231,138,38)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="415.50">h..</text></g><g><title>net_rx_action (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="389" width="1.8755%" height="15" fill="rgb(231,145,46)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="399.50">n..</text></g><g><title>__napi_poll (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="373" width="1.8755%" height="15" fill="rgb(251,118,11)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="383.50">_..</text></g><g><title>process_backlog (28,565,055 samples, 1.88%)</title><rect x="61.3628%" y="357" width="1.8755%" height="15" fill="rgb(217,147,25)" fg:x="934570120" fg:w="28565055"/><text x="61.6128%" y="367.50">p..</text></g><g><title>__netif_receive_skb_one_core (23,996,573 samples, 1.58%)</title><rect x="61.6628%" y="341" width="1.5756%" height="15" fill="rgb(247,81,37)" fg:x="939138602" fg:w="23996573"/><text x="61.9128%" y="351.50"></text></g><g><title>ip_local_deliver (23,996,573 samples, 1.58%)</title><rect x="61.6628%" y="325" width="1.5756%" height="15" fill="rgb(209,12,38)" fg:x="939138602" fg:w="23996573"/><text x="61.9128%" y="335.50"></text></g><g><title>ip_local_deliver_finish (23,996,573 samples, 1.58%)</title><rect x="61.6628%" y="309" width="1.5756%" height="15" fill="rgb(227,1,9)" fg:x="939138602" fg:w="23996573"/><text x="61.9128%" y="319.50"></text></g><g><title>ip_protocol_deliver_rcu (23,996,573 samples, 1.58%)</title><rect x="61.6628%" y="293" width="1.5756%" height="15" fill="rgb(248,47,43)" fg:x="939138602" fg:w="23996573"/><text x="61.9128%" y="303.50"></text></g><g><title>tcp_v4_rcv (23,996,573 samples, 1.58%)</title><rect x="61.6628%" y="277" width="1.5756%" height="15" fill="rgb(221,10,30)" fg:x="939138602" fg:w="23996573"/><text x="61.9128%" y="287.50"></text></g><g><title>tcp_v4_do_rcv (14,821,974 samples, 0.97%)</title><rect x="62.2652%" y="261" width="0.9732%" height="15" fill="rgb(210,229,1)" fg:x="948313201" fg:w="14821974"/><text x="62.5152%" y="271.50"></text></g><g><title>tcp_rcv_established (14,821,974 samples, 0.97%)</title><rect x="62.2652%" y="245" width="0.9732%" height="15" fill="rgb(222,148,37)" fg:x="948313201" fg:w="14821974"/><text x="62.5152%" y="255.50"></text></g><g><title>__tcp_push_pending_frames (14,821,974 samples, 0.97%)</title><rect x="62.2652%" y="229" width="0.9732%" height="15" fill="rgb(234,67,33)" fg:x="948313201" fg:w="14821974"/><text x="62.5152%" y="239.50"></text></g><g><title>tcp_write_xmit (14,821,974 samples, 0.97%)</title><rect x="62.2652%" y="213" width="0.9732%" height="15" fill="rgb(247,98,35)" fg:x="948313201" fg:w="14821974"/><text x="62.5152%" y="223.50"></text></g><g><title>skb_shift (4,532,615 samples, 0.30%)</title><rect x="62.9408%" y="197" width="0.2976%" height="15" fill="rgb(247,138,52)" fg:x="958602560" fg:w="4532615"/><text x="63.1908%" y="207.50"></text></g><g><title>_copy_to_iter (22,025,516 samples, 1.45%)</title><rect x="63.2384%" y="469" width="1.4462%" height="15" fill="rgb(213,79,30)" fg:x="963135175" fg:w="22025516"/><text x="63.4884%" y="479.50"></text></g><g><title>skb_copy_datagram_iter (26,424,230 samples, 1.73%)</title><rect x="63.2384%" y="501" width="1.7350%" height="15" fill="rgb(246,177,23)" fg:x="963135175" fg:w="26424230"/><text x="63.4884%" y="511.50"></text></g><g><title>__skb_datagram_iter (26,424,230 samples, 1.73%)</title><rect x="63.2384%" y="485" width="1.7350%" height="15" fill="rgb(230,62,27)" fg:x="963135175" fg:w="26424230"/><text x="63.4884%" y="495.50"></text></g><g><title>simple_copy_to_iter (4,398,714 samples, 0.29%)</title><rect x="64.6845%" y="469" width="0.2888%" height="15" fill="rgb(216,154,8)" fg:x="985160691" fg:w="4398714"/><text x="64.9345%" y="479.50"></text></g><g><title>__check_object_size (4,398,714 samples, 0.29%)</title><rect x="64.6845%" y="453" width="0.2888%" height="15" fill="rgb(244,35,45)" fg:x="985160691" fg:w="4398714"/><text x="64.9345%" y="463.50"></text></g><g><title>__virt_addr_valid (4,398,714 samples, 0.29%)</title><rect x="64.6845%" y="437" width="0.2888%" height="15" fill="rgb(251,115,12)" fg:x="985160691" fg:w="4398714"/><text x="64.9345%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (284,986,538 samples, 18.71%)</title><rect x="47.1471%" y="805" width="18.7119%" height="15" fill="rgb(240,54,50)" fg:x="718061567" fg:w="284986538"/><text x="47.3971%" y="815.50">&lt;std::io::buffered::bufreader..</text></g><g><title>std::io::default_read_exact (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="789" width="5.9332%" height="15" fill="rgb(233,84,52)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="799.50">std::io:..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="773" width="5.9332%" height="15" fill="rgb(207,117,47)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="783.50">&lt;std::io..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="757" width="5.9332%" height="15" fill="rgb(249,43,39)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="767.50">&lt;std::io..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="741" width="5.9332%" height="15" fill="rgb(209,38,44)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="751.50">std::io:..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="725" width="5.9332%" height="15" fill="rgb(236,212,23)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="735.50">std::io:..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read_buf (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="709" width="5.9332%" height="15" fill="rgb(242,79,21)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="719.50">&lt;std::ne..</text></g><g><title>std::sys_common::net::TcpStream::read_buf (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="693" width="5.9332%" height="15" fill="rgb(211,96,35)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="703.50">std::sys..</text></g><g><title>std::sys::pal::unix::net::Socket::read_buf (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="677" width="5.9332%" height="15" fill="rgb(253,215,40)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="687.50">std::sys..</text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="661" width="5.9332%" height="15" fill="rgb(211,81,21)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="671.50">std::sys..</text></g><g><title>recv (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="645" width="5.9332%" height="15" fill="rgb(208,190,38)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="655.50">recv</text></g><g><title>entry_SYSCALL_64 (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="629" width="5.9332%" height="15" fill="rgb(235,213,38)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="639.50">entry_SY..</text></g><g><title>do_syscall_64 (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="613" width="5.9332%" height="15" fill="rgb(237,122,38)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="623.50">do_sysca..</text></g><g><title>__x64_sys_recvfrom (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="597" width="5.9332%" height="15" fill="rgb(244,218,35)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="607.50">__x64_sy..</text></g><g><title>__sys_recvfrom (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="581" width="5.9332%" height="15" fill="rgb(240,68,47)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="591.50">__sys_re..</text></g><g><title>sock_recvmsg (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="565" width="5.9332%" height="15" fill="rgb(210,16,53)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="575.50">sock_rec..</text></g><g><title>inet_recvmsg (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="549" width="5.9332%" height="15" fill="rgb(235,124,12)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="559.50">inet_rec..</text></g><g><title>tcp_recvmsg (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="533" width="5.9332%" height="15" fill="rgb(224,169,11)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="543.50">tcp_recv..</text></g><g><title>tcp_recvmsg_locked (90,364,478 samples, 5.93%)</title><rect x="59.9258%" y="517" width="5.9332%" height="15" fill="rgb(250,166,2)" fg:x="912683627" fg:w="90364478"/><text x="60.1758%" y="527.50">tcp_recv..</text></g><g><title>tcp_rcv_space_adjust (13,488,700 samples, 0.89%)</title><rect x="64.9734%" y="501" width="0.8857%" height="15" fill="rgb(242,216,29)" fg:x="989559405" fg:w="13488700"/><text x="65.2234%" y="511.50"></text></g><g><title>tcp_mstamp_refresh (13,488,700 samples, 0.89%)</title><rect x="64.9734%" y="485" width="0.8857%" height="15" fill="rgb(230,116,27)" fg:x="989559405" fg:w="13488700"/><text x="65.2234%" y="495.50"></text></g><g><title>ktime_get (13,488,700 samples, 0.89%)</title><rect x="64.9734%" y="469" width="0.8857%" height="15" fill="rgb(228,99,48)" fg:x="989559405" fg:w="13488700"/><text x="65.2234%" y="479.50"></text></g><g><title>read_tsc (4,541,454 samples, 0.30%)</title><rect x="65.5608%" y="453" width="0.2982%" height="15" fill="rgb(253,11,6)" fg:x="998506651" fg:w="4541454"/><text x="65.8108%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (28,589,780 samples, 1.88%)</title><rect x="67.8767%" y="773" width="1.8772%" height="15" fill="rgb(247,143,39)" fg:x="1033777674" fg:w="28589780"/><text x="68.1267%" y="783.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (28,589,780 samples, 1.88%)</title><rect x="67.8767%" y="757" width="1.8772%" height="15" fill="rgb(236,97,10)" fg:x="1033777674" fg:w="28589780"/><text x="68.1267%" y="767.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (28,589,780 samples, 1.88%)</title><rect x="67.8767%" y="741" width="1.8772%" height="15" fill="rgb(233,208,19)" fg:x="1033777674" fg:w="28589780"/><text x="68.1267%" y="751.50">a..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (64,451,847 samples, 4.23%)</title><rect x="66.7051%" y="789" width="4.2318%" height="15" fill="rgb(216,164,2)" fg:x="1015934106" fg:w="64451847"/><text x="66.9551%" y="799.50">std::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (18,018,499 samples, 1.18%)</title><rect x="69.7539%" y="773" width="1.1831%" height="15" fill="rgb(220,129,5)" fg:x="1062367454" fg:w="18018499"/><text x="70.0039%" y="783.50"></text></g><g><title>__refill_stock (4,195,788 samples, 0.28%)</title><rect x="71.2339%" y="517" width="0.2755%" height="15" fill="rgb(242,17,10)" fg:x="1084909528" fg:w="4195788"/><text x="71.4839%" y="527.50"></text></g><g><title>drain_stock (4,195,788 samples, 0.28%)</title><rect x="71.2339%" y="501" width="0.2755%" height="15" fill="rgb(242,107,0)" fg:x="1084909528" fg:w="4195788"/><text x="71.4839%" y="511.50"></text></g><g><title>page_counter_uncharge (4,195,788 samples, 0.28%)</title><rect x="71.2339%" y="485" width="0.2755%" height="15" fill="rgb(251,28,31)" fg:x="1084909528" fg:w="4195788"/><text x="71.4839%" y="495.50"></text></g><g><title>release_sock (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="629" width="0.5719%" height="15" fill="rgb(233,223,10)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="639.50"></text></g><g><title>__release_sock (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="613" width="0.5719%" height="15" fill="rgb(215,21,27)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="623.50"></text></g><g><title>tcp_v4_do_rcv (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="597" width="0.5719%" height="15" fill="rgb(232,23,21)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="607.50"></text></g><g><title>tcp_rcv_established (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="581" width="0.5719%" height="15" fill="rgb(244,5,23)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="591.50"></text></g><g><title>tcp_ack (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="565" width="0.5719%" height="15" fill="rgb(226,81,46)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="575.50"></text></g><g><title>__sk_mem_reduce_allocated (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="549" width="0.5719%" height="15" fill="rgb(247,70,30)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="559.50"></text></g><g><title>refill_stock (8,710,396 samples, 0.57%)</title><rect x="71.2339%" y="533" width="0.5719%" height="15" fill="rgb(212,68,19)" fg:x="1084909528" fg:w="8710396"/><text x="71.4839%" y="543.50"></text></g><g><title>drain_stock (4,514,608 samples, 0.30%)</title><rect x="71.5094%" y="517" width="0.2964%" height="15" fill="rgb(240,187,13)" fg:x="1089105316" fg:w="4514608"/><text x="71.7594%" y="527.50"></text></g><g><title>__sk_dst_check (4,540,308 samples, 0.30%)</title><rect x="72.9337%" y="549" width="0.2981%" height="15" fill="rgb(223,113,26)" fg:x="1110796582" fg:w="4540308"/><text x="73.1837%" y="559.50"></text></g><g><title>ipv4_dst_check (4,540,308 samples, 0.30%)</title><rect x="72.9337%" y="533" width="0.2981%" height="15" fill="rgb(206,192,2)" fg:x="1110796582" fg:w="4540308"/><text x="73.1837%" y="543.50"></text></g><g><title>sk_filter_trim_cap (4,485,657 samples, 0.29%)</title><rect x="73.5299%" y="341" width="0.2945%" height="15" fill="rgb(241,108,4)" fg:x="1119877935" fg:w="4485657"/><text x="73.7799%" y="351.50"></text></g><g><title>__rcu_read_unlock (4,485,657 samples, 0.29%)</title><rect x="73.5299%" y="325" width="0.2945%" height="15" fill="rgb(247,173,49)" fg:x="1119877935" fg:w="4485657"/><text x="73.7799%" y="335.50"></text></g><g><title>__tcp_transmit_skb (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="325" width="0.2484%" height="15" fill="rgb(224,114,35)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="335.50"></text></g><g><title>__ip_queue_xmit (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="309" width="0.2484%" height="15" fill="rgb(245,159,27)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="319.50"></text></g><g><title>ip_local_out (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="293" width="0.2484%" height="15" fill="rgb(245,172,44)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="303.50"></text></g><g><title>__ip_local_out (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="277" width="0.2484%" height="15" fill="rgb(236,23,11)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="287.50"></text></g><g><title>nf_hook_slow (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="261" width="0.2484%" height="15" fill="rgb(205,117,38)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="271.50"></text></g><g><title>[[nf_conntrack]] (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="245" width="0.2484%" height="15" fill="rgb(237,72,25)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="255.50"></text></g><g><title>[[nf_conntrack]] (3,783,763 samples, 0.25%)</title><rect x="73.8245%" y="229" width="0.2484%" height="15" fill="rgb(244,70,9)" fg:x="1124363592" fg:w="3783763"/><text x="74.0745%" y="239.50"></text></g><g><title>__tcp_ack_snd_check (4,374,953 samples, 0.29%)</title><rect x="74.0729%" y="309" width="0.2873%" height="15" fill="rgb(217,125,39)" fg:x="1128147355" fg:w="4374953"/><text x="74.3229%" y="319.50"></text></g><g><title>__tcp_send_ack.part.0 (4,397,068 samples, 0.29%)</title><rect x="74.3601%" y="309" width="0.2887%" height="15" fill="rgb(235,36,10)" fg:x="1132522308" fg:w="4397068"/><text x="74.6101%" y="319.50"></text></g><g><title>__alloc_skb (4,397,068 samples, 0.29%)</title><rect x="74.3601%" y="293" width="0.2887%" height="15" fill="rgb(251,123,47)" fg:x="1132522308" fg:w="4397068"/><text x="74.6101%" y="303.50"></text></g><g><title>tcp_rcv_established (17,077,537 samples, 1.12%)</title><rect x="74.0729%" y="325" width="1.1213%" height="15" fill="rgb(221,13,13)" fg:x="1128147355" fg:w="17077537"/><text x="74.3229%" y="335.50"></text></g><g><title>__tcp_transmit_skb (8,305,516 samples, 0.55%)</title><rect x="74.6489%" y="309" width="0.5453%" height="15" fill="rgb(238,131,9)" fg:x="1136919376" fg:w="8305516"/><text x="74.8989%" y="319.50"></text></g><g><title>__ip_queue_xmit (4,348,077 samples, 0.29%)</title><rect x="74.9087%" y="293" width="0.2855%" height="15" fill="rgb(211,50,8)" fg:x="1140876815" fg:w="4348077"/><text x="75.1587%" y="303.50"></text></g><g><title>ip_local_out (4,348,077 samples, 0.29%)</title><rect x="74.9087%" y="277" width="0.2855%" height="15" fill="rgb(245,182,24)" fg:x="1140876815" fg:w="4348077"/><text x="75.1587%" y="287.50"></text></g><g><title>__ip_local_out (4,348,077 samples, 0.29%)</title><rect x="74.9087%" y="261" width="0.2855%" height="15" fill="rgb(242,14,37)" fg:x="1140876815" fg:w="4348077"/><text x="75.1587%" y="271.50"></text></g><g><title>nf_hook_slow (4,348,077 samples, 0.29%)</title><rect x="74.9087%" y="245" width="0.2855%" height="15" fill="rgb(246,228,12)" fg:x="1140876815" fg:w="4348077"/><text x="75.1587%" y="255.50"></text></g><g><title>[[nf_conntrack]] (4,348,077 samples, 0.29%)</title><rect x="74.9087%" y="229" width="0.2855%" height="15" fill="rgb(213,55,15)" fg:x="1140876815" fg:w="4348077"/><text x="75.1587%" y="239.50"></text></g><g><title>[[nf_conntrack]] (4,348,077 samples, 0.29%)</title><rect x="74.9087%" y="213" width="0.2855%" height="15" fill="rgb(209,9,3)" fg:x="1140876815" fg:w="4348077"/><text x="75.1587%" y="223.50"></text></g><g><title>ip_local_deliver (34,450,075 samples, 2.26%)</title><rect x="73.2318%" y="405" width="2.2620%" height="15" fill="rgb(230,59,30)" fg:x="1115336890" fg:w="34450075"/><text x="73.4818%" y="415.50">i..</text></g><g><title>ip_local_deliver_finish (34,450,075 samples, 2.26%)</title><rect x="73.2318%" y="389" width="2.2620%" height="15" fill="rgb(209,121,21)" fg:x="1115336890" fg:w="34450075"/><text x="73.4818%" y="399.50">i..</text></g><g><title>ip_protocol_deliver_rcu (34,450,075 samples, 2.26%)</title><rect x="73.2318%" y="373" width="2.2620%" height="15" fill="rgb(220,109,13)" fg:x="1115336890" fg:w="34450075"/><text x="73.4818%" y="383.50">i..</text></g><g><title>tcp_v4_rcv (34,450,075 samples, 2.26%)</title><rect x="73.2318%" y="357" width="2.2620%" height="15" fill="rgb(232,18,1)" fg:x="1115336890" fg:w="34450075"/><text x="73.4818%" y="367.50">t..</text></g><g><title>tcp_v4_do_rcv (25,423,373 samples, 1.67%)</title><rect x="73.8245%" y="341" width="1.6693%" height="15" fill="rgb(215,41,42)" fg:x="1124363592" fg:w="25423373"/><text x="74.0745%" y="351.50"></text></g><g><title>tcp_rcv_state_process (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="325" width="0.2995%" height="15" fill="rgb(224,123,36)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="335.50"></text></g><g><title>__tcp_transmit_skb (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="309" width="0.2995%" height="15" fill="rgb(240,125,3)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="319.50"></text></g><g><title>__ip_queue_xmit (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="293" width="0.2995%" height="15" fill="rgb(205,98,50)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="303.50"></text></g><g><title>ip_local_out (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="277" width="0.2995%" height="15" fill="rgb(205,185,37)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="287.50"></text></g><g><title>__ip_local_out (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="261" width="0.2995%" height="15" fill="rgb(238,207,15)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="271.50"></text></g><g><title>nf_hook_slow (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="245" width="0.2995%" height="15" fill="rgb(213,199,42)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="255.50"></text></g><g><title>[[nf_conntrack]] (4,562,073 samples, 0.30%)</title><rect x="75.1942%" y="229" width="0.2995%" height="15" fill="rgb(235,201,11)" fg:x="1145224892" fg:w="4562073"/><text x="75.4442%" y="239.50"></text></g><g><title>__local_bh_enable_ip (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="517" width="2.5627%" height="15" fill="rgb(207,46,11)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="527.50">__..</text></g><g><title>do_softirq.part.0 (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="501" width="2.5627%" height="15" fill="rgb(241,35,35)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="511.50">do..</text></g><g><title>handle_softirqs (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="485" width="2.5627%" height="15" fill="rgb(243,32,47)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="495.50">ha..</text></g><g><title>net_rx_action (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="469" width="2.5627%" height="15" fill="rgb(247,202,23)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="479.50">ne..</text></g><g><title>__napi_poll (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="453" width="2.5627%" height="15" fill="rgb(219,102,11)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="463.50">__..</text></g><g><title>process_backlog (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="437" width="2.5627%" height="15" fill="rgb(243,110,44)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="447.50">pr..</text></g><g><title>__netif_receive_skb_one_core (39,030,733 samples, 2.56%)</title><rect x="73.2318%" y="421" width="2.5627%" height="15" fill="rgb(222,74,54)" fg:x="1115336890" fg:w="39030733"/><text x="73.4818%" y="431.50">__..</text></g><g><title>ip_rcv (4,580,658 samples, 0.30%)</title><rect x="75.4937%" y="405" width="0.3008%" height="15" fill="rgb(216,99,12)" fg:x="1149786965" fg:w="4580658"/><text x="75.7437%" y="415.50"></text></g><g><title>__ip_queue_xmit (52,639,596 samples, 3.46%)</title><rect x="72.6379%" y="565" width="3.4563%" height="15" fill="rgb(226,22,26)" fg:x="1106292193" fg:w="52639596"/><text x="72.8879%" y="575.50">__i..</text></g><g><title>ip_finish_output2 (43,594,899 samples, 2.86%)</title><rect x="73.2318%" y="549" width="2.8624%" height="15" fill="rgb(217,163,10)" fg:x="1115336890" fg:w="43594899"/><text x="73.4818%" y="559.50">ip..</text></g><g><title>__dev_queue_xmit (43,594,899 samples, 2.86%)</title><rect x="73.2318%" y="533" width="2.8624%" height="15" fill="rgb(213,25,53)" fg:x="1115336890" fg:w="43594899"/><text x="73.4818%" y="543.50">__..</text></g><g><title>dev_hard_start_xmit (4,564,166 samples, 0.30%)</title><rect x="75.7945%" y="517" width="0.2997%" height="15" fill="rgb(252,105,26)" fg:x="1154367623" fg:w="4564166"/><text x="76.0445%" y="527.50"></text></g><g><title>loopback_xmit (4,564,166 samples, 0.30%)</title><rect x="75.7945%" y="501" width="0.2997%" height="15" fill="rgb(220,39,43)" fg:x="1154367623" fg:w="4564166"/><text x="76.0445%" y="511.50"></text></g><g><title>tcp_wfree (4,564,166 samples, 0.30%)</title><rect x="75.7945%" y="485" width="0.2997%" height="15" fill="rgb(229,68,48)" fg:x="1154367623" fg:w="4564166"/><text x="76.0445%" y="495.50"></text></g><g><title>__tcp_transmit_skb (57,172,971 samples, 3.75%)</title><rect x="72.6379%" y="581" width="3.7539%" height="15" fill="rgb(252,8,32)" fg:x="1106292193" fg:w="57172971"/><text x="72.8879%" y="591.50">__tc..</text></g><g><title>__skb_clone (4,533,375 samples, 0.30%)</title><rect x="76.0942%" y="565" width="0.2977%" height="15" fill="rgb(223,20,43)" fg:x="1158931789" fg:w="4533375"/><text x="76.3442%" y="575.50"></text></g><g><title>__tcp_push_pending_frames (65,557,602 samples, 4.30%)</title><rect x="72.3879%" y="613" width="4.3044%" height="15" fill="rgb(229,81,49)" fg:x="1102484481" fg:w="65557602"/><text x="72.6379%" y="623.50">__tcp..</text></g><g><title>tcp_write_xmit (65,557,602 samples, 4.30%)</title><rect x="72.3879%" y="597" width="4.3044%" height="15" fill="rgb(236,28,36)" fg:x="1102484481" fg:w="65557602"/><text x="72.6379%" y="607.50">tcp_w..</text></g><g><title>tcp_event_new_data_sent (4,576,919 samples, 0.30%)</title><rect x="76.3918%" y="581" width="0.3005%" height="15" fill="rgb(249,185,26)" fg:x="1163465164" fg:w="4576919"/><text x="76.6418%" y="591.50"></text></g><g><title>sk_reset_timer (4,576,919 samples, 0.30%)</title><rect x="76.3918%" y="565" width="0.3005%" height="15" fill="rgb(249,174,33)" fg:x="1163465164" fg:w="4576919"/><text x="76.6418%" y="575.50"></text></g><g><title>__mod_timer (4,576,919 samples, 0.30%)</title><rect x="76.3918%" y="549" width="0.3005%" height="15" fill="rgb(233,201,37)" fg:x="1163465164" fg:w="4576919"/><text x="76.6418%" y="559.50"></text></g><g><title>_copy_from_iter (17,871,346 samples, 1.17%)</title><rect x="76.6923%" y="613" width="1.1734%" height="15" fill="rgb(221,78,26)" fg:x="1168042083" fg:w="17871346"/><text x="76.9423%" y="623.50"></text></g><g><title>__rmqueue_pcplist (4,502,926 samples, 0.30%)</title><rect x="77.8657%" y="533" width="0.2957%" height="15" fill="rgb(250,127,30)" fg:x="1185913429" fg:w="4502926"/><text x="78.1157%" y="543.50"></text></g><g><title>_raw_spin_trylock (4,495,355 samples, 0.30%)</title><rect x="78.1614%" y="533" width="0.2952%" height="15" fill="rgb(230,49,44)" fg:x="1190416355" fg:w="4495355"/><text x="78.4114%" y="543.50"></text></g><g><title>sk_page_frag_refill (54,155,189 samples, 3.56%)</title><rect x="77.8657%" y="613" width="3.5558%" height="15" fill="rgb(229,67,23)" fg:x="1185913429" fg:w="54155189"/><text x="78.1157%" y="623.50">sk_p..</text></g><g><title>skb_page_frag_refill (54,155,189 samples, 3.56%)</title><rect x="77.8657%" y="597" width="3.5558%" height="15" fill="rgb(249,83,47)" fg:x="1185913429" fg:w="54155189"/><text x="78.1157%" y="607.50">skb_..</text></g><g><title>alloc_pages_mpol_noprof (54,155,189 samples, 3.56%)</title><rect x="77.8657%" y="581" width="3.5558%" height="15" fill="rgb(215,43,3)" fg:x="1185913429" fg:w="54155189"/><text x="78.1157%" y="591.50">allo..</text></g><g><title>__alloc_pages_noprof (54,155,189 samples, 3.56%)</title><rect x="77.8657%" y="565" width="3.5558%" height="15" fill="rgb(238,154,13)" fg:x="1185913429" fg:w="54155189"/><text x="78.1157%" y="575.50">__al..</text></g><g><title>get_page_from_freelist (54,155,189 samples, 3.56%)</title><rect x="77.8657%" y="549" width="3.5558%" height="15" fill="rgb(219,56,2)" fg:x="1185913429" fg:w="54155189"/><text x="78.1157%" y="559.50">get_..</text></g><g><title>prep_new_page (45,156,908 samples, 2.96%)</title><rect x="78.4566%" y="533" width="2.9650%" height="15" fill="rgb(233,0,4)" fg:x="1194911710" fg:w="45156908"/><text x="78.7066%" y="543.50">pre..</text></g><g><title>clear_page_erms (45,156,908 samples, 2.96%)</title><rect x="78.4566%" y="517" width="2.9650%" height="15" fill="rgb(235,30,7)" fg:x="1194911710" fg:w="45156908"/><text x="78.7066%" y="527.50">cle..</text></g><g><title>tcp_send_mss (4,373,098 samples, 0.29%)</title><rect x="81.4215%" y="613" width="0.2871%" height="15" fill="rgb(250,79,13)" fg:x="1240068618" fg:w="4373098"/><text x="81.6715%" y="623.50"></text></g><g><title>tcp_current_mss (4,373,098 samples, 0.29%)</title><rect x="81.4215%" y="597" width="0.2871%" height="15" fill="rgb(211,146,34)" fg:x="1240068618" fg:w="4373098"/><text x="81.6715%" y="607.50"></text></g><g><title>tcp_stream_alloc_skb (13,497,808 samples, 0.89%)</title><rect x="81.7086%" y="613" width="0.8863%" height="15" fill="rgb(228,22,38)" fg:x="1244441716" fg:w="13497808"/><text x="81.9586%" y="623.50"></text></g><g><title>__alloc_skb (13,497,808 samples, 0.89%)</title><rect x="81.7086%" y="597" width="0.8863%" height="15" fill="rgb(235,168,5)" fg:x="1244441716" fg:w="13497808"/><text x="81.9586%" y="607.50"></text></g><g><title>kmalloc_reserve (13,497,808 samples, 0.89%)</title><rect x="81.7086%" y="581" width="0.8863%" height="15" fill="rgb(221,155,16)" fg:x="1244441716" fg:w="13497808"/><text x="81.9586%" y="591.50"></text></g><g><title>kmem_cache_alloc_node_noprof (9,033,468 samples, 0.59%)</title><rect x="82.0018%" y="565" width="0.5931%" height="15" fill="rgb(215,215,53)" fg:x="1248906056" fg:w="9033468"/><text x="82.2518%" y="575.50"></text></g><g><title>__rcu_read_unlock (4,518,064 samples, 0.30%)</title><rect x="82.5949%" y="565" width="0.2967%" height="15" fill="rgb(223,4,10)" fg:x="1257939524" fg:w="4518064"/><text x="82.8449%" y="575.50"></text></g><g><title>__sk_dst_check (4,512,749 samples, 0.30%)</title><rect x="82.8915%" y="565" width="0.2963%" height="15" fill="rgb(234,103,6)" fg:x="1262457588" fg:w="4512749"/><text x="83.1415%" y="575.50"></text></g><g><title>__tcp_push_pending_frames (4,292,740 samples, 0.28%)</title><rect x="83.4858%" y="325" width="0.2819%" height="15" fill="rgb(227,97,0)" fg:x="1271507909" fg:w="4292740"/><text x="83.7358%" y="335.50"></text></g><g><title>tcp_write_xmit (4,292,740 samples, 0.28%)</title><rect x="83.4858%" y="309" width="0.2819%" height="15" fill="rgb(234,150,53)" fg:x="1271507909" fg:w="4292740"/><text x="83.7358%" y="319.50"></text></g><g><title>sock_def_readable (4,415,246 samples, 0.29%)</title><rect x="84.3530%" y="309" width="0.2899%" height="15" fill="rgb(228,201,54)" fg:x="1284716501" fg:w="4415246"/><text x="84.6030%" y="319.50"></text></g><g><title>__wake_up_sync_key (4,415,246 samples, 0.29%)</title><rect x="84.3530%" y="293" width="0.2899%" height="15" fill="rgb(222,22,37)" fg:x="1284716501" fg:w="4415246"/><text x="84.6030%" y="303.50"></text></g><g><title>__wake_up_common (4,415,246 samples, 0.29%)</title><rect x="84.3530%" y="277" width="0.2899%" height="15" fill="rgb(237,53,32)" fg:x="1284716501" fg:w="4415246"/><text x="84.6030%" y="287.50"></text></g><g><title>pollwake (4,415,246 samples, 0.29%)</title><rect x="84.3530%" y="261" width="0.2899%" height="15" fill="rgb(233,25,53)" fg:x="1284716501" fg:w="4415246"/><text x="84.6030%" y="271.50"></text></g><g><title>try_to_wake_up (4,415,246 samples, 0.29%)</title><rect x="84.3530%" y="245" width="0.2899%" height="15" fill="rgb(210,40,34)" fg:x="1284716501" fg:w="4415246"/><text x="84.6030%" y="255.50"></text></g><g><title>select_task_rq_fair (4,415,246 samples, 0.29%)</title><rect x="84.3530%" y="229" width="0.2899%" height="15" fill="rgb(241,220,44)" fg:x="1284716501" fg:w="4415246"/><text x="84.6030%" y="239.50"></text></g><g><title>tcp_rcv_established (21,948,460 samples, 1.44%)</title><rect x="83.4858%" y="341" width="1.4411%" height="15" fill="rgb(235,28,35)" fg:x="1271507909" fg:w="21948460"/><text x="83.7358%" y="351.50"></text></g><g><title>tcp_data_queue (17,655,720 samples, 1.16%)</title><rect x="83.7676%" y="325" width="1.1593%" height="15" fill="rgb(210,56,17)" fg:x="1275800649" fg:w="17655720"/><text x="84.0176%" y="335.50"></text></g><g><title>tcp_queue_rcv (4,324,622 samples, 0.28%)</title><rect x="84.6429%" y="309" width="0.2839%" height="15" fill="rgb(224,130,29)" fg:x="1289131747" fg:w="4324622"/><text x="84.8929%" y="319.50"></text></g><g><title>ip_local_deliver (26,552,745 samples, 1.74%)</title><rect x="83.4858%" y="421" width="1.7434%" height="15" fill="rgb(235,212,8)" fg:x="1271507909" fg:w="26552745"/><text x="83.7358%" y="431.50"></text></g><g><title>ip_local_deliver_finish (26,552,745 samples, 1.74%)</title><rect x="83.4858%" y="405" width="1.7434%" height="15" fill="rgb(223,33,50)" fg:x="1271507909" fg:w="26552745"/><text x="83.7358%" y="415.50"></text></g><g><title>ip_protocol_deliver_rcu (26,552,745 samples, 1.74%)</title><rect x="83.4858%" y="389" width="1.7434%" height="15" fill="rgb(219,149,13)" fg:x="1271507909" fg:w="26552745"/><text x="83.7358%" y="399.50"></text></g><g><title>tcp_v4_rcv (26,552,745 samples, 1.74%)</title><rect x="83.4858%" y="373" width="1.7434%" height="15" fill="rgb(250,156,29)" fg:x="1271507909" fg:w="26552745"/><text x="83.7358%" y="383.50"></text></g><g><title>tcp_v4_do_rcv (26,552,745 samples, 1.74%)</title><rect x="83.4858%" y="357" width="1.7434%" height="15" fill="rgb(216,193,19)" fg:x="1271507909" fg:w="26552745"/><text x="83.7358%" y="367.50"></text></g><g><title>tcp_rcv_state_process (4,604,285 samples, 0.30%)</title><rect x="84.9269%" y="341" width="0.3023%" height="15" fill="rgb(216,135,14)" fg:x="1293456369" fg:w="4604285"/><text x="85.1769%" y="351.50"></text></g><g><title>tcp_data_queue (4,604,285 samples, 0.30%)</title><rect x="84.9269%" y="325" width="0.3023%" height="15" fill="rgb(241,47,5)" fg:x="1293456369" fg:w="4604285"/><text x="85.1769%" y="335.50"></text></g><g><title>sock_def_readable (4,604,285 samples, 0.30%)</title><rect x="84.9269%" y="309" width="0.3023%" height="15" fill="rgb(233,42,35)" fg:x="1293456369" fg:w="4604285"/><text x="85.1769%" y="319.50"></text></g><g><title>__napi_poll (30,839,628 samples, 2.02%)</title><rect x="83.4858%" y="469" width="2.0249%" height="15" fill="rgb(231,13,6)" fg:x="1271507909" fg:w="30839628"/><text x="83.7358%" y="479.50">_..</text></g><g><title>process_backlog (30,839,628 samples, 2.02%)</title><rect x="83.4858%" y="453" width="2.0249%" height="15" fill="rgb(207,181,40)" fg:x="1271507909" fg:w="30839628"/><text x="83.7358%" y="463.50">p..</text></g><g><title>__netif_receive_skb_one_core (30,839,628 samples, 2.02%)</title><rect x="83.4858%" y="437" width="2.0249%" height="15" fill="rgb(254,173,49)" fg:x="1271507909" fg:w="30839628"/><text x="83.7358%" y="447.50">_..</text></g><g><title>ip_rcv (4,286,883 samples, 0.28%)</title><rect x="85.2292%" y="421" width="0.2815%" height="15" fill="rgb(221,1,38)" fg:x="1298060654" fg:w="4286883"/><text x="85.4792%" y="431.50"></text></g><g><title>__rcu_read_lock (4,286,883 samples, 0.28%)</title><rect x="85.2292%" y="405" width="0.2815%" height="15" fill="rgb(206,124,46)" fg:x="1298060654" fg:w="4286883"/><text x="85.4792%" y="415.50"></text></g><g><title>__local_bh_enable_ip (39,990,199 samples, 2.63%)</title><rect x="83.1879%" y="533" width="2.6257%" height="15" fill="rgb(249,21,11)" fg:x="1266970337" fg:w="39990199"/><text x="83.4379%" y="543.50">__..</text></g><g><title>do_softirq.part.0 (39,990,199 samples, 2.63%)</title><rect x="83.1879%" y="517" width="2.6257%" height="15" fill="rgb(222,201,40)" fg:x="1266970337" fg:w="39990199"/><text x="83.4379%" y="527.50">do..</text></g><g><title>handle_softirqs (39,990,199 samples, 2.63%)</title><rect x="83.1879%" y="501" width="2.6257%" height="15" fill="rgb(235,61,29)" fg:x="1266970337" fg:w="39990199"/><text x="83.4379%" y="511.50">ha..</text></g><g><title>net_rx_action (35,452,627 samples, 2.33%)</title><rect x="83.4858%" y="485" width="2.3278%" height="15" fill="rgb(219,207,3)" fg:x="1271507909" fg:w="35452627"/><text x="83.7358%" y="495.50">n..</text></g><g><title>napi_consume_skb (4,612,999 samples, 0.30%)</title><rect x="85.5107%" y="469" width="0.3029%" height="15" fill="rgb(222,56,46)" fg:x="1302347537" fg:w="4612999"/><text x="85.7607%" y="479.50"></text></g><g><title>skb_release_data (4,612,999 samples, 0.30%)</title><rect x="85.5107%" y="453" width="0.3029%" height="15" fill="rgb(239,76,54)" fg:x="1302347537" fg:w="4612999"/><text x="85.7607%" y="463.50"></text></g><g><title>free_unref_page (4,612,999 samples, 0.30%)</title><rect x="85.5107%" y="437" width="0.3029%" height="15" fill="rgb(231,124,27)" fg:x="1302347537" fg:w="4612999"/><text x="85.7607%" y="447.50"></text></g><g><title>free_tail_page_prepare (4,612,999 samples, 0.30%)</title><rect x="85.5107%" y="421" width="0.3029%" height="15" fill="rgb(249,195,6)" fg:x="1302347537" fg:w="4612999"/><text x="85.7607%" y="431.50"></text></g><g><title>ip_finish_output2 (48,932,550 samples, 3.21%)</title><rect x="83.1879%" y="565" width="3.2129%" height="15" fill="rgb(237,174,47)" fg:x="1266970337" fg:w="48932550"/><text x="83.4379%" y="575.50">ip_..</text></g><g><title>__dev_queue_xmit (48,932,550 samples, 3.21%)</title><rect x="83.1879%" y="549" width="3.2129%" height="15" fill="rgb(206,201,31)" fg:x="1266970337" fg:w="48932550"/><text x="83.4379%" y="559.50">__d..</text></g><g><title>dev_hard_start_xmit (8,942,351 samples, 0.59%)</title><rect x="85.8136%" y="533" width="0.5871%" height="15" fill="rgb(231,57,52)" fg:x="1306960536" fg:w="8942351"/><text x="86.0636%" y="543.50"></text></g><g><title>loopback_xmit (8,942,351 samples, 0.59%)</title><rect x="85.8136%" y="517" width="0.5871%" height="15" fill="rgb(248,177,22)" fg:x="1306960536" fg:w="8942351"/><text x="86.0636%" y="527.50"></text></g><g><title>__netif_rx (8,942,351 samples, 0.59%)</title><rect x="85.8136%" y="501" width="0.5871%" height="15" fill="rgb(215,211,37)" fg:x="1306960536" fg:w="8942351"/><text x="86.0636%" y="511.50"></text></g><g><title>netif_rx_internal (8,942,351 samples, 0.59%)</title><rect x="85.8136%" y="485" width="0.5871%" height="15" fill="rgb(241,128,51)" fg:x="1306960536" fg:w="8942351"/><text x="86.0636%" y="495.50"></text></g><g><title>enqueue_to_backlog (8,942,351 samples, 0.59%)</title><rect x="85.8136%" y="469" width="0.5871%" height="15" fill="rgb(227,165,31)" fg:x="1306960536" fg:w="8942351"/><text x="86.0636%" y="479.50"></text></g><g><title>_raw_spin_unlock_irqrestore (4,443,132 samples, 0.29%)</title><rect x="86.1090%" y="453" width="0.2917%" height="15" fill="rgb(228,167,24)" fg:x="1311459755" fg:w="4443132"/><text x="86.3590%" y="463.50"></text></g><g><title>ip_local_out (13,633,839 samples, 0.90%)</title><rect x="86.4007%" y="565" width="0.8952%" height="15" fill="rgb(228,143,12)" fg:x="1315902887" fg:w="13633839"/><text x="86.6507%" y="575.50"></text></g><g><title>__ip_local_out (9,068,710 samples, 0.60%)</title><rect x="86.7004%" y="549" width="0.5954%" height="15" fill="rgb(249,149,8)" fg:x="1320468016" fg:w="9068710"/><text x="86.9504%" y="559.50"></text></g><g><title>nf_hook_slow (9,068,710 samples, 0.60%)</title><rect x="86.7004%" y="533" width="0.5954%" height="15" fill="rgb(243,35,44)" fg:x="1320468016" fg:w="9068710"/><text x="86.9504%" y="543.50"></text></g><g><title>[[nf_conntrack]] (9,068,710 samples, 0.60%)</title><rect x="86.7004%" y="517" width="0.5954%" height="15" fill="rgb(246,89,9)" fg:x="1320468016" fg:w="9068710"/><text x="86.9504%" y="527.50"></text></g><g><title>[[nf_conntrack]] (4,550,015 samples, 0.30%)</title><rect x="86.9971%" y="501" width="0.2987%" height="15" fill="rgb(233,213,13)" fg:x="1324986711" fg:w="4550015"/><text x="87.2471%" y="511.50"></text></g><g><title>__tcp_transmit_skb (76,017,427 samples, 4.99%)</title><rect x="82.5949%" y="597" width="4.9912%" height="15" fill="rgb(233,141,41)" fg:x="1257939524" fg:w="76017427"/><text x="82.8449%" y="607.50">__tcp_..</text></g><g><title>__ip_queue_xmit (76,017,427 samples, 4.99%)</title><rect x="82.5949%" y="581" width="4.9912%" height="15" fill="rgb(239,167,4)" fg:x="1257939524" fg:w="76017427"/><text x="82.8449%" y="591.50">__ip_q..</text></g><g><title>ip_output (4,420,225 samples, 0.29%)</title><rect x="87.2959%" y="565" width="0.2902%" height="15" fill="rgb(209,217,16)" fg:x="1329536726" fg:w="4420225"/><text x="87.5459%" y="575.50"></text></g><g><title>nf_hook_slow (4,420,225 samples, 0.29%)</title><rect x="87.2959%" y="549" width="0.2902%" height="15" fill="rgb(219,88,35)" fg:x="1329536726" fg:w="4420225"/><text x="87.5459%" y="559.50"></text></g><g><title>[[nf_nat]] (4,420,225 samples, 0.29%)</title><rect x="87.2959%" y="533" width="0.2902%" height="15" fill="rgb(220,193,23)" fg:x="1329536726" fg:w="4420225"/><text x="87.5459%" y="543.50"></text></g><g><title>ktime_get (4,208,576 samples, 0.28%)</title><rect x="87.5861%" y="597" width="0.2763%" height="15" fill="rgb(230,90,52)" fg:x="1333956951" fg:w="4208576"/><text x="87.8361%" y="607.50"></text></g><g><title>read_tsc (4,208,576 samples, 0.28%)</title><rect x="87.5861%" y="581" width="0.2763%" height="15" fill="rgb(252,106,19)" fg:x="1333956951" fg:w="4208576"/><text x="87.8361%" y="591.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="789" width="17.2245%" height="15" fill="rgb(206,74,20)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="799.50">std::io::buffered::bufwrite..</text></g><g><title>_ZN3std2io8buffered9bufwriter18BufWriter$LT$W$GT$9flush_buf17h51c7c7e9302dcc84E.llvm.7069050453686699821 (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="773" width="17.2245%" height="15" fill="rgb(230,138,44)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="783.50">_ZN3std2io8buffered9bufwrit..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="757" width="17.2245%" height="15" fill="rgb(235,182,43)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="767.50">&lt;std::net::tcp::TcpStream a..</text></g><g><title>std::sys_common::net::UdpSocket::send (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="741" width="17.2245%" height="15" fill="rgb(242,16,51)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="751.50">std::sys_common::net::UdpSo..</text></g><g><title>__send (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="725" width="17.2245%" height="15" fill="rgb(248,9,4)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="735.50">__send</text></g><g><title>entry_SYSCALL_64 (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="709" width="17.2245%" height="15" fill="rgb(210,31,22)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="719.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="693" width="17.2245%" height="15" fill="rgb(239,54,39)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="703.50">do_syscall_64</text></g><g><title>__x64_sys_sendto (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="677" width="17.2245%" height="15" fill="rgb(230,99,41)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="687.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (262,333,047 samples, 17.22%)</title><rect x="70.9369%" y="661" width="17.2245%" height="15" fill="rgb(253,106,12)" fg:x="1080385953" fg:w="262333047"/><text x="71.1869%" y="671.50">__sys_sendto</text></g><g><title>tcp_sendmsg (257,809,472 samples, 16.93%)</title><rect x="71.2339%" y="645" width="16.9275%" height="15" fill="rgb(213,46,41)" fg:x="1084909528" fg:w="257809472"/><text x="71.4839%" y="655.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (249,099,076 samples, 16.36%)</title><rect x="71.8059%" y="629" width="16.3556%" height="15" fill="rgb(215,133,35)" fg:x="1093619924" fg:w="249099076"/><text x="72.0559%" y="639.50">tcp_sendmsg_locked</text></g><g><title>tcp_write_xmit (84,779,476 samples, 5.57%)</title><rect x="82.5949%" y="613" width="5.5665%" height="15" fill="rgb(213,28,5)" fg:x="1257939524" fg:w="84779476"/><text x="82.8449%" y="623.50">tcp_wri..</text></g><g><title>tcp_event_new_data_sent (4,553,473 samples, 0.30%)</title><rect x="87.8624%" y="597" width="0.2990%" height="15" fill="rgb(215,77,49)" fg:x="1338165527" fg:w="4553473"/><text x="88.1124%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (18,002,525 samples, 1.18%)</title><rect x="90.5650%" y="773" width="1.1820%" height="15" fill="rgb(248,100,22)" fg:x="1379325501" fg:w="18002525"/><text x="90.8150%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18,002,525 samples, 1.18%)</title><rect x="90.5650%" y="757" width="1.1820%" height="15" fill="rgb(208,67,9)" fg:x="1379325501" fg:w="18002525"/><text x="90.8150%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (18,002,525 samples, 1.18%)</title><rect x="90.5650%" y="741" width="1.1820%" height="15" fill="rgb(219,133,21)" fg:x="1379325501" fg:w="18002525"/><text x="90.8150%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (18,002,525 samples, 1.18%)</title><rect x="90.5650%" y="725" width="1.1820%" height="15" fill="rgb(246,46,29)" fg:x="1379325501" fg:w="18002525"/><text x="90.8150%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (49,153,353 samples, 3.23%)</title><rect x="91.7470%" y="773" width="3.2274%" height="15" fill="rgb(246,185,52)" fg:x="1397328026" fg:w="49153353"/><text x="91.9970%" y="783.50">all..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (515,062,481 samples, 33.82%)</title><rect x="65.8590%" y="805" width="33.8184%" height="15" fill="rgb(252,136,11)" fg:x="1003048105" fg:w="515062481"/><text x="66.1090%" y="815.50">&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io:..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (175,391,586 samples, 11.52%)</title><rect x="88.1614%" y="789" width="11.5160%" height="15" fill="rgb(219,138,53)" fg:x="1342719000" fg:w="175391586"/><text x="88.4114%" y="799.50">std::io::buffered..</text></g><g><title>core::intrinsics::copy_nonoverlapping (71,629,207 samples, 4.70%)</title><rect x="94.9743%" y="773" width="4.7031%" height="15" fill="rgb(211,51,23)" fg:x="1446481379" fg:w="71629207"/><text x="95.2243%" y="783.50">core:..</text></g><g><title>_start (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1109" width="99.6846%" height="15" fill="rgb(247,221,28)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1119.50">_start</text></g><g><title>__libc_start_main (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1093" width="99.6846%" height="15" fill="rgb(251,222,45)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1103.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1077" width="99.6846%" height="15" fill="rgb(217,162,53)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1087.50">[libc.so.6]</text></g><g><title>main (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1061" width="99.6846%" height="15" fill="rgb(229,93,14)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1071.50">main</text></g><g><title>std::rt::lang_start_internal (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1045" width="99.6846%" height="15" fill="rgb(209,67,49)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1055.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1029" width="99.6846%" height="15" fill="rgb(213,87,29)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="1013" width="99.6846%" height="15" fill="rgb(205,151,52)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1023.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="997" width="99.6846%" height="15" fill="rgb(253,215,39)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="1007.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="981" width="99.6846%" height="15" fill="rgb(221,220,41)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="991.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="965" width="99.6846%" height="15" fill="rgb(218,133,21)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="949" width="99.6846%" height="15" fill="rgb(221,193,43)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="933" width="99.6846%" height="15" fill="rgb(240,128,52)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="943.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="917" width="99.6846%" height="15" fill="rgb(253,114,12)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="927.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hb9a2b99f85506dffE.llvm.10498623629454506357 (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="901" width="99.6846%" height="15" fill="rgb(215,223,47)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="911.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hb9a2b99f85506dffE.llvm.10498623629454506357</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="885" width="99.6846%" height="15" fill="rgb(248,225,23)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="895.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="869" width="99.6846%" height="15" fill="rgb(250,108,0)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="879.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust::main (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="853" width="99.6846%" height="15" fill="rgb(228,208,7)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="863.50">rust::main</text></g><g><title>rust::handle_connection (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="837" width="99.6846%" height="15" fill="rgb(244,45,10)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="847.50">rust::handle_connection</text></g><g><title>rust::convert_to_greyscale (1,518,219,205 samples, 99.68%)</title><rect x="0.3148%" y="821" width="99.6846%" height="15" fill="rgb(207,125,25)" fg:x="4794264" fg:w="1518219205"/><text x="0.5648%" y="831.50">rust::convert_to_greyscale</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,902,445 samples, 0.32%)</title><rect x="99.6775%" y="805" width="0.3219%" height="15" fill="rgb(210,195,18)" fg:x="1518111024" fg:w="4902445"/><text x="99.9275%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,902,445 samples, 0.32%)</title><rect x="99.6775%" y="789" width="0.3219%" height="15" fill="rgb(249,80,12)" fg:x="1518111024" fg:w="4902445"/><text x="99.9275%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (4,902,445 samples, 0.32%)</title><rect x="99.6775%" y="773" width="0.3219%" height="15" fill="rgb(221,65,9)" fg:x="1518111024" fg:w="4902445"/><text x="99.9275%" y="783.50"></text></g><g><title>all (1,523,023,283 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="1523023283"/><text x="0.2500%" y="1151.50"></text></g><g><title>rust (1,523,022,941 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="342" fg:w="1523022941"/><text x="0.2500%" y="1135.50">rust</text></g></svg></svg>